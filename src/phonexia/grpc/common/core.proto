// Copyright 2025 Phonexia s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Phonexia common message definitions for gRPC API.
syntax = "proto3";

package phonexia.grpc.common;

import "google/protobuf/duration.proto";

//  Audio message in either raw or one of the standard formats.
//
//  In the case of raw format, this message contains raw audio data that
//  are encoded in a format specified in the configuration.
//  The audio <code>content</code> is represented as raw audio if the
//  <code>raw_audio_config</code> filed is specified.
//
//  In case that the <code>raw_audio_config</code> is not specified, this
//  message contains audio data in one of the supported standard formats
//  and encodings. Supported formats are <code>WAV</code> (various encodings),
//  <code>FLAC</code>, and <code>OGG_OPUS</code>.
//  For best results, the audio source should be captured and transmitted
//  using a lossless encoding (<code>FLAC</code> or <code>LINEAR16</code>).
//  The accuracy of the speech technologies can be reduced if lossy codecs
//  are used to capture or transmit audio, particularly if background noise
//  is present. Lossy codecs include <code>ALAW</code>, <code>MULAW</code>,
//  or <code>OGG_OPUS</code>.
message Audio {
  // The audio data bytes encoded in the supported format. In case of raw
  // audio, this field does not include the audio header, but only the data.
  // <em>Note: as with all bytes fields, proto buffers use a pure binary
  // representation.</em>
  bytes content = 1;

  // Time range of the audio to process. If omitted, the
  // whole audio is processed. If <code>start</code> is omitted, the
  // audio is processed from the beginning. If <code>end</code> is omitted,
  // the audio is processed to the end.
  TimeRange time_range = 2;

  // Specify raw audio metadata in case that the <code>content</code> is in
  // raw format.
  phonexia.grpc.common.RawAudioConfig raw_audio_config = 3;
}

//  Configuration message for raw audio data used in <code>Audio</code> message.
message RawAudioConfig {
  // Enumeration of supported audio encodings for raw audio data.
  enum AudioEncoding {
    PCM16 = 0; // 16-bit signed little-endian linear Pulse Code Modulation
    PCM32 = 1; // 32-bit signed little-endian linear Pulse Code Modulation
    MULAW = 2; // Î¼-law encoding
    ALAW = 3;  // A-law encoding
  }

  // The encoding of the audio data. This field determines how the raw audio
  // data is interpreted.
  AudioEncoding encoding = 1;

  // The sample rate in hertz (Hz) of the audio data. This field specifies
  // the number of audio samples per second. Most Phonexia technologies resample
  // the audio into 8kHz or 16kHz as a first step.
  int32 sample_rate_hertz = 2;

  // The number of channels in the audio data.
  // <em>Note: some technologies only support mono-channel audio recordings.
  // Setting this field to values other than 1 will result in an error for
  // such technologies.</em>
  int32 channels = 3;
}

// Represents the result from voiceprint extraction.
message Voiceprint {
  // Voiceprint data bytes encoded in UBJSON format.
  bytes content = 1;
}

// Data type representing matrix of values. The matrix is represented as a
// linear array in row major format.
message Matrix {
  // Number of rows in the matrix.
  uint64 rows_count = 1;

  // Number of columns in the matrix.
  uint64 columns_count = 2;

  // Sequential list of matrix values in row major format.
  repeated float values = 3;
}

// Data type representing time range.
message TimeRange {
  // Start time of the time range.
  google.protobuf.Duration start = 1;

  // End time of the time range.
  google.protobuf.Duration end = 2;
}