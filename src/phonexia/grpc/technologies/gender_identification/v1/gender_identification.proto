// Copyright 2024 Phonexia s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Phonexia Gender Identification gRPC API.
syntax = "proto3";

package phonexia.grpc.technologies.gender_identification.v1;

import "phonexia/grpc/common/core.proto";

// Service that implements gender identification.
service GenderIdentification {
  // Performs synchronous gender identification from one or more voiceprints.
  // Identification is performed on each received chunk and partial results
  // corresponding to that chunk are returned.
  rpc Identify(stream IdentifyRequest) returns (stream IdentifyResponse);
}

// The top-level message sent by the client for the <code>Identify</code>
// method.
message IdentifyRequest {
  // List of voiceprints for the identification.
  repeated phonexia.grpc.common.Voiceprint voiceprints = 1;
}

message Score {
  // Log-likelihood ratio score. The LLR provides a quantitative measure of
  // how much more likely the data is under one model (gender) compared
  // to another.
  // A positive LLR suggests that the respective model is more likely to be
  // supported by the data than the other model, while the negative LLR suggests
  // the opposite. 
  float score_llr = 1;
}

// A gender identification result. It contains scores for respective genders.
message IdentifyResult {
  // Score for male.
  Score score_male = 1;
  // Score for female.
  Score score_female = 2;
}

// The top-level message returned to the client by the <code>Identify</code>
// method. It contains the result as one or more <code>IdentifyResult</code>
// messages.
message IdentifyResponse {
  // Sequential list of results corresponding to sequential list of voiceprints
  // in <code>IdentifyRequest</code>.
  repeated IdentifyResult results = 1;
}
