// Copyright 2025 Phonexia s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Phonexia Keyword Spotting gRPC API.
syntax = "proto3";

package phonexia.grpc.technologies.keyword_spotting.v1;

import "phonexia/grpc/common/core.proto";
import "google/protobuf/duration.proto";

/**
 * Service implementing Keyword Spotting. For more information, see
 * https://docs.cloud.phonexia.com/products/speech-platform-4/technologies/keyword-spotting/
 */
service KeywordSpotting {
    /**
     * Detect performs keyword spotting on the audio data.
     * Returns detected keywords and their pronunciations.
     */
    rpc Detect (stream DetectRequest) returns (stream DetectResponse);

    /**
     * ListAllowedSymbols returns lists of allowed symbols for the keyword
     * spotting model.
     */
    rpc ListAllowedSymbols (ListAllowedSymbolsRequest) returns (ListAllowedSymbolsResponse);
}

/**
 * A keyword.
 */
message Keyword {
    /**
     * The spelling of the keyword written in graphemes.
     * Only supported graphemes listed by <code>ListAllowedSymbols</code> can be used.
     */
    string spelling = 1;

    /**
     * Pronunciations written in phonemes separated by spaces.
     * Only supported phonemes listed by <code>ListAllowedSymbols</code> can be used.
     * Keyword is matched if any of the pronunciations matches.
     * If not set, the pronunciation is searched in the system's vocabulary and if it is not found,
     * it is automatically generated by the system.
     */
    repeated string pronunciations = 2;
}

/**
 * A request to detect keywords in an audio file.
 */
message DetectRequest {
    /**
     * The audio data to process.
     */
    phonexia.grpc.common.Audio audio = 1;

    /**
     * The list of keywords to detect.
     */
    repeated Keyword keywords = 2;

    /**
     *  Specifies how the dynamic range of score is used (default is 1.0). Must be greater than zero.
     */
    optional float confidence_sharpness = 3;
}

/**
 * A matched keyword.
 */
message MatchedKeyword {
    /**
     * The source of the matched keyword.
     */
    enum PronunciationSource {
        /**
         * The pronunciation is in system's vocabulary.
         */
        DICTIONARY = 0;

        /**
         * The pronunciation has been generated by the system
         */
        GENERATED = 1;

        /**
         * The pronunciation was set by the user.
         */
        USER = 2;
    }

    /**
     * The spelling of the matched keyword written in graphemes.
     */
    string spelling = 1;

    /**
     * The pronunciation of the matched keyword written in phonemes separated by spaces.
     */
    string pronunciation = 2;

    /**
     * The source of the matched pronunciation.
     */
    PronunciationSource pronunciation_source = 3;
}

/**
 * A match.
 */
message Match {
    /**
     * The start time of the match.
     */
    google.protobuf.Duration start_time = 1;

    /**
     * The end time of the match.
     */
    google.protobuf.Duration end_time = 2;

    /**
     * The confidence of the match in range [0, 1].
     */
    float confidence = 3;

    /**
     * Score is calculated as log likelihood ratio in range [-inf, inf].
     */
    float score = 4;

    /**
     * The matched keyword.
     */
    MatchedKeyword keyword = 5;
}

/**
 * The result of the detect operation.
 */
message DetectResult {
    /**
     * The list of matches.
     */
    repeated Match matches = 1;
}

/**
 * The response of the detect operation.
 */
message DetectResponse {
    /**
     * The result of the detect operation.
     */
    DetectResult result = 1;

    /**
     * The length of the processed audio.
     */
    google.protobuf.Duration processed_audio_length = 2;
}

/**
 * The request to list allowed symbols.
 */
message ListAllowedSymbolsRequest {}

/**
 * The response of the list allowed symbols operation.
 */
message ListAllowedSymbolsResponse {
    /**
     * The list of allowed graphemes.
     */
    repeated string graphemes = 1;

    /**
     * The list of allowed phonemes.
     */
    repeated string phonemes = 2;
}