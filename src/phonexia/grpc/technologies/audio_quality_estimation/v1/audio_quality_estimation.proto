// Copyright 2025 Phonexia s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Phonexia Audio Quality Estimation gRPC API.
syntax = "proto3";

package phonexia.grpc.technologies.audio_quality_estimation.v1;

import "phonexia/grpc/common/core.proto";
import "google/protobuf/duration.proto";

// Service implementing Audio Quality Estimation.
service AudioQualityEstimation {
  // Performs synchronous Audio Quality Estimation.
  // The processing starts after the whole audio has been received.
  rpc Estimate(stream EstimateRequest) returns (EstimateResponse);
}

// The top-level message sent by the client for the <code>Estimate</code>
// method.
message EstimateRequest {
  // Audio data for which Audio Quality Estimation should be performed.
  // At least 1 millisecond of audio is required, otherwise the result will not contain
  // any estimations.
  phonexia.grpc.common.Audio audio = 1;
}

// The collection of all Audio Quality Estimation result types.
message EstimateResult {
  // Estimation of Perceptual Evaluation of Speech Quality.
  optional float pesq_estimation = 1;
  // Signal to Noise Ratio in decibels based on waveform distribution.
  optional float signal_noise_ratio = 2;
  // Total length of the audio in seconds.
  optional float audio_length = 3;
  // Maximum amplitude of the signal, typically a positive number in the interval of
  // [-1, 1].
  optional float max_amplitude = 4;
  // Minimum amplitude of the signal, typically a negative number in the interval of
  // [-1, 1].
  optional float min_amplitude = 5;
  // Maximum absolute value of the signal (i.e., the higher of the absolute values of
  // `max_amplitude` and `min_amplitude`).
  optional float peak_amplitude = 6;
  // Arithmetic mean of the sample amplitudes.
  optional float mean_amplitude = 7;
  // Sampling rate in hertz of the audio.
  optional int32 sampling_rate = 8;
}

// The top-level message returned to the client by the <code>Estimate</code>
// method.
message EstimateResponse {
  // Audio Quality Estimation result.
  EstimateResult result = 1;

  // Total length of the processed audio.
  // Set only if this is the last response in the stream.
  google.protobuf.Duration processed_audio_length = 2;
}