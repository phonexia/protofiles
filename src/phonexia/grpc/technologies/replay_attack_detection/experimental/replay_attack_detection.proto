// Copyright 2025 Phonexia s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Phonexia Replay Attack Detection gRPC API.
syntax = "proto3";

package phonexia.grpc.technologies.replay_attack_detection.experimental;

import "google/protobuf/duration.proto";
import "phonexia/grpc/common/core.proto";

// Service implementing replay attack detection.
service ReplayAttackDetection {
  // Performs replay attack detection on the given audio.
  rpc Detect(stream DetectRequest) returns (DetectResponse);
}

// The top level message sent by the client for the <code>Detect</code> method.
message DetectRequest {
  // Audio data for replay attack detection.
  // Technically, the audio must have at least 0.05 seconds of speech. If the audio is shorter,
  // the <code>result</code> will not be present in the output. Practically, at least few seconds
  // of audio should be provided for better results.
  phonexia.grpc.common.Audio audio = 1;
}

// The top level message returned to the client by the <code>Detect</code> method.
message DetectResponse {
  // Result of replay attack detection. Will not be present if the audio is shorter than 0.05 seconds.
  optional DetectResult result = 1;

  // Total length of the processed audio.
  google.protobuf.Duration processed_audio_length = 2;
}

// Message representing the result of replay attack detection.
message DetectResult {
  // Log-likelihood ratio (LLR) of the replay attack detection. The score is a
  // floating-point value. A value greater than 0 indicates the audio likely contains
  // a replay attack, while a value less than 0 indicates, that the audio probably does
  // not contain a replay attack.
  float score = 1;
}